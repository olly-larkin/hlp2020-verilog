module Verishot.Project

open System.IO
open System.Text.RegularExpressions

open Verishot.FrontEnd
open Verishot.Util
open Verishot.FileUtil

let matchIdentifierRegex id = 
    let m = Regex.Match (id, "[a-zA-Z][a-zA-Z0-9_]*") 
    m.Success

let getExistingModuleNamesFromVProj workspacePath projectName =
    let vProjFilePath = workspacePath +/ projectName + ".vproj"
    vProjFilePath
    |> readVFile
    |> List.map (Path.GetFileNameWithoutExtension)

let getNumberOfVProjFiles workspacePath = 
    workspacePath
    |> getFilenamesInFolderPath "*.vproj"
    |> List.length

let getModuleTemplate moduleName = 
    sprintf "module %s (\n);\nendmodule" moduleName

let createNewModule workspacePath projectName moduleName = 
    let exitWithError = exitCodes.["NewModuleError"]
    match matchIdentifierRegex moduleName with
    | true -> 
        match getNumberOfVProjFiles workspacePath with
        | 1 ->
            let currentModules = getExistingModuleNamesFromVProj workspacePath projectName
            match List.exists ((=) moduleName) currentModules with 
            | false ->
                // add to .vproj
                let vProjFilePath = workspacePath +/ projectName + ".proj"
                let vProjContent = readFileToString vProjFilePath + sprintf "\n%s.v" projectName
                writeStringToFile vProjFilePath vProjContent

                // create the new module
                let moduleTemplateContent = getModuleTemplate moduleName
                let moduleFilepath = workspacePath +/ moduleName + ".v"
                writeStringToFile moduleFilepath moduleTemplateContent

                printf "Successfully created module `%s`" moduleName
                exitCodes.["Success"]
            | _ -> 
                printf "Module name already exists"
                exitWithError
        | 0 ->
            printf "Create a new project first." 
            exitWithError
        | _ ->
            printf "More than one project exists in this workspace."
            exitWithError
    | _ -> 
        printf "Enter a valid module name"
        exitWithError

let deleteModule workspacePath projectName moduleName = 
    let exitWithError = exitCodes.["DeleteModuleError"]
    let currentModules = getExistingModuleNamesFromVProj workspacePath projectName
    match List.exists ((=) moduleName) currentModules with 
    | true ->
        // update .vproj
        let vProjFilePath = workspacePath +/ projectName + ".proj"
        let vProjContent =
            vProjFilePath
            |> readFileToStringList
            |> List.filter (fun x -> x.Trim() |> (<>) (moduleName + ".v"))
            |> String.concat "\n"
        writeStringToFile vProjFilePath vProjContent

        // delete .v
        let vFilePath = workspacePath +/ moduleName + ".v"
        deleteFile vFilePath
        printf "Successfully delete module `%s`" moduleName
        exitCodes.["Success"]
    | _ -> 
        printf ""
        exitWithError

let vProjHeader = "// ===== Verishot Project File =====
// WARNING: Do not edit this file directly unless you know what you are doing.`,
// Use the Command Palette to add/delete modules
// 
// The first module listed must be the top level module`"

let createNewProject workspacePath projectName = 
    let exitWithError = exitCodes.["NewProjectError"]
    match getNumberOfVProjFiles workspacePath with 
    | 0 -> 
        match matchIdentifierRegex projectName with
        | true -> 
            let vProjFilePath = workspacePath +/ projectName
            writeStringToFile vProjFilePath vProjHeader
            printf "Successfully created project `%s`" projectName
            createNewModule workspacePath projectName projectName
        | _ ->
            printf "Enter a valid project name"
            exitWithError
    | _ -> 
        printf "This workspace already contains an existing project."
        exitWithError

let listModules workspacePath projectName = 
    getExistingModuleNamesFromVProj workspacePath projectName 
    |> String.concat "\n" 
    |> printf "%s"
    exitCodes.["Success"]