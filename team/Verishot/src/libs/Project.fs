module Verishot.Project

open System.IO
open System.Text.RegularExpressions

open Verishot.FrontEnd
open Verishot.Util
open Verishot.FileUtil

let matchIdentifierRegex id = 
    let m = Regex.Match (id, "[a-zA-Z][a-zA-Z0-9_]*") 
    m.Success

let getNumberOfVProjFiles workspacePath = 
    workspacePath
    |> getFilenamesInFolderPath "*.vproj"
    |> List.length

let getModuleTemplate moduleName = 
    sprintf "module %s (\n);\nendmodule" moduleName

let createNewModule vProjFilePath moduleName = 
    let exitWithError = exitCodes.["NewModuleError"]
    match matchIdentifierRegex moduleName with
    | true -> 
        let currentModules = getExistingModuleNamesFromVProj vProjFilePath
        match List.exists ((=) moduleName) currentModules with 
        | false ->
            // add to .vproj
            let vProjContent = readFileToString vProjFilePath + sprintf "\n%s.v" moduleName
            writeStringToFile vProjFilePath vProjContent

            // create the new module
            let workspacePath = Directory.GetParent(vProjFilePath).FullName
            let moduleTemplateContent = getModuleTemplate moduleName
            let moduleFilepath = workspacePath +/ moduleName + ".v"
            writeStringToFile moduleFilepath moduleTemplateContent

            printf "Successfully created module `%s`" moduleName
            exitCodes.["Success"]
        | _ -> 
            printf "Module name already exists"
            exitWithError
    | _ -> 
        printf "Enter a valid module name"
        exitWithError

let deleteModule vProjFilePath moduleName = 
    let exitWithError = exitCodes.["DeleteModuleError"]
    let currentModules = getExistingModuleNamesFromVProj vProjFilePath
    match List.exists ((=) moduleName) currentModules with 
    | true ->
        // update .vproj
        let vProjContent =
            vProjFilePath
            |> readFileToStringList
            |> List.filter (fun x -> x.Trim() |> (<>) (moduleName + ".v"))
            |> String.concat "\n"
        writeStringToFile vProjFilePath vProjContent

        // delete .v
        let workspacePath = Directory.GetParent(vProjFilePath).FullName
        let vFilePath = workspacePath +/ moduleName + ".v"
        deleteFile vFilePath
        printf "Successfully deleted module `%s`" moduleName
        exitCodes.["Success"]
    | _ -> 
        printf "Module `%s` does not exist" moduleName
        exitWithError


let createNewProject workspacePath projectName = 
    let exitWithError = exitCodes.["NewProjectError"]
    
    let vProjHeader = "// ===== Verishot Project File =====
// WARNING: Do not edit this file directly unless you know what you are doing!
// 
// The first module listed must be the top level module"

    match getNumberOfVProjFiles workspacePath with 
    | 0 -> 
        match matchIdentifierRegex projectName with
        | true -> 
            let vProjFilePath = workspacePath +/ projectName + ".vproj"
            writeStringToFile vProjFilePath vProjHeader
            
            let exitCode = createNewModule vProjFilePath projectName
            match exitCode = exitCodes.["Success"] with
            | true -> 
                printf "\n\nSuccessfully created project `%s`" projectName
                exitCodes.["Success"]
            | _ ->
                exitCode
           
        | _ ->
            printf "Enter a valid project name"
            exitWithError
    | _ -> 
        printf "This workspace already contains an existing project"
        exitWithError

let listModules vProjFilePath = 
    getExistingModuleNamesFromVProj vProjFilePath 
    |> String.concat "\n" 
    |> printf "%s"
    exitCodes.["Success"]